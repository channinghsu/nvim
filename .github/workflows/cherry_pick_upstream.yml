name: cherry-pick upstream

on:
  # Manual trigger - go to Actions tab and click "Run workflow"
  workflow_dispatch:
  schedule: [{ cron: "0 13 * * *" }]

jobs:
  cherry-pick-upstream:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Add upstream remote
        run: |
          if ! git remote | grep -q upstream; then
            git remote add upstream https://github.com/ayamir/nvimdots.git
          fi
          git fetch upstream main

      - name: Cherry-pick upstream commits
        id: cherry_pick
        run: |
          echo "Fetching recent commits from upstream/main"

          # Ëé∑Âèñ upstream/main ÊúÄËøë 50 ‰∏™Êèê‰∫§ÔºàÊéíÈô§ github-actions[bot]Ôºâ
          COMMITS=$(git log --reverse --pretty=format:"%H %an" upstream/main -5 | grep -v "github-actions\[bot\]" | awk '{print $1}' || true)

          if [ -z "$COMMITS" ]; then
            echo "No commits to cherry-pick"
            echo "status=no_commits" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Found $(echo "$COMMITS" | wc -l) commits from upstream"

          # ÂàõÂª∫‰∏¥Êó∂Êñá‰ª∂
          CONFLICT_FILE="/tmp/conflicts.txt"
          SUCCESS_FILE="/tmp/success.txt"

          # ÈÄê‰∏™ cherry-pickÔºåË∑≥ËøáÂ∑≤Â≠òÂú®ÁöÑÊèê‰∫§
          CHERRY_PICKED=0
          CONFLICTS=0
          SKIPPED=0

          for commit in $COMMITS; do
            # Ê£ÄÊü•ËØ•Êèê‰∫§ÊòØÂê¶Â∑≤ÁªèÂ≠òÂú®‰∫éÂΩìÂâçÂàÜÊîØ
            if git branch --contains $commit 2>/dev/null | grep -q "^\*"; then
              echo "‚äò Skipping $commit (already in current branch)"
              SKIPPED=$((SKIPPED + 1))
              continue
            fi

            # Ëé∑ÂèñÊèê‰∫§‰ø°ÊÅØ
            COMMIT_MSG=$(git log --format=%s -n 1 $commit)
            COMMIT_AUTHOR=$(git log --format=%an -n 1 $commit)

            echo "Cherry-picking $commit: $COMMIT_MSG"
            if git cherry-pick $commit 2>&1; then
              CHERRY_PICKED=$((CHERRY_PICKED + 1))
              echo "‚úì Successfully cherry-picked $commit"
              echo "- ‚úÖ [\`${commit:0:7}\`](https://github.com/ayamir/nvimdots/commit/$commit) $COMMIT_MSG" >> $SUCCESS_FILE
            else
              # Ê£ÄÊü•ÊòØÂê¶ÊòØÂõ†‰∏∫ÂÜÖÂÆπÂ∑≤Â≠òÂú®ÂØºËá¥ÁöÑÂ§±Ë¥•
              if git status | grep -q "nothing to commit"; then
                echo "‚äò Content already exists for $commit"
                SKIPPED=$((SKIPPED + 1))
                git cherry-pick --abort 2>&1 || true
              else
                echo "‚úó Conflict detected for $commit"
                
                # Ëé∑ÂèñÂÜ≤Á™ÅÁöÑÊñá‰ª∂ÂàóË°®
                CONFLICTED_FILES=$(git diff --name-only --diff-filter=U)
                
                # Ê£ÄÊü•ÊòØÂê¶ÊâÄÊúâÂÜ≤Á™ÅÊñá‰ª∂ÈÉΩÂ∫îËØ•Ë∑≥Ëøá
                SHOULD_SKIP=true
                for file in $CONFLICTED_FILES; do
                  # Ë∑≥Ëøá README.md
                  if [[ "$file" =~ [Rr][Ee][Aa][Dd][Mm][Ee]\.[Mm][Dd]$ ]]; then
                    echo "‚äò Skipping README.md file: $file"
                    continue
                  fi
                  
                  # Ê£ÄÊü•Êñá‰ª∂ÊòØÂê¶Â≠òÂú®‰∫é main ÂàÜÊîØ
                  if git cat-file -e origin/main:"$file" 2>/dev/null; then
                    SHOULD_SKIP=false
                    break
                  else
                    echo "‚äò File $file does not exist in main branch, will skip"
                  fi
                done
                
                if [ "$SHOULD_SKIP" = true ]; then
                  echo "‚äò All conflicted files should be skipped for $commit"
                  SKIPPED=$((SKIPPED + 1))
                else
                  CONFLICTS=$((CONFLICTS + 1))
                  echo "- ‚ùå [\`${commit:0:7}\`](https://github.com/ayamir/nvimdots/commit/$commit) $COMMIT_MSG (by $COMMIT_AUTHOR)" >> $CONFLICT_FILE
                fi
                
                git cherry-pick --abort 2>&1 || true
              fi
            fi
          done

          echo "Summary: $CHERRY_PICKED commits cherry-picked, $SKIPPED skipped, $CONFLICTS conflicts"

          # Âè™ÊúâÂú®ÊúâÊàêÂäüÊàñÂ§±Ë¥•ÁöÑÊèê‰∫§Êó∂ÊâçÁîüÊàêÊä•Âëä
          if [ $CHERRY_PICKED -gt 0 ] || [ $CONFLICTS -gt 0 ]; then
            REPORT_FILE="/tmp/sync_report.md"
            echo "# üîÑ Upstream Sync Report" > $REPORT_FILE
            echo "" >> $REPORT_FILE
            echo "**Sync Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $REPORT_FILE
            echo "**Workflow Run:** [\#$GITHUB_RUN_ID](https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)" >> $REPORT_FILE
            echo "" >> $REPORT_FILE

            echo "## üìä Summary" >> $REPORT_FILE
            echo "" >> $REPORT_FILE
            echo "| Status | Count |" >> $REPORT_FILE
            echo "|--------|-------|" >> $REPORT_FILE
            echo "| ‚úÖ Successfully Cherry-picked | $CHERRY_PICKED |" >> $REPORT_FILE
            echo "| ‚äò Skipped (Already exists) | $SKIPPED |" >> $REPORT_FILE
            echo "| ‚ùå Conflicts | $CONFLICTS |" >> $REPORT_FILE
            echo "" >> $REPORT_FILE

            if [ -f $SUCCESS_FILE ]; then
              echo "## ‚úÖ Successfully Cherry-picked Commits" >> $REPORT_FILE
              echo "" >> $REPORT_FILE
              cat $SUCCESS_FILE >> $REPORT_FILE
              echo "" >> $REPORT_FILE
            fi

            if [ -f $CONFLICT_FILE ]; then
              echo "## ‚ö†Ô∏è Conflicted Commits (Skipped)" >> $REPORT_FILE
              echo "" >> $REPORT_FILE
              echo "> These commits could not be applied due to conflicts and require manual intervention." >> $REPORT_FILE
              echo "" >> $REPORT_FILE
              cat $CONFLICT_FILE >> $REPORT_FILE
              echo "" >> $REPORT_FILE
            fi
          fi

          # ËæìÂá∫Áä∂ÊÄÅ
          if [ $CHERRY_PICKED -eq 0 ] && [ $CONFLICTS -eq 0 ]; then
            echo "status=no_changes" >> $GITHUB_OUTPUT
            exit 0
          elif [ $CONFLICTS -gt 0 ]; then
            echo "status=partial_success" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
          fi

          echo "cherry_picked=$CHERRY_PICKED" >> $GITHUB_OUTPUT
          echo "conflicts=$CONFLICTS" >> $GITHUB_OUTPUT
          echo "skipped=$SKIPPED" >> $GITHUB_OUTPUT

      - name: Push changes
        id: push
        run: |
          if git diff --quiet origin/main; then
            echo "No changes to push"
            echo "pushed=false" >> $GITHUB_OUTPUT
          else
            git push origin main
            echo "Successfully pushed cherry-picked commits"
            echo "pushed=true" >> $GITHUB_OUTPUT
          fi

      - name: Create sync report issue
        if: steps.cherry_pick.outputs.status == 'success' || steps.cherry_pick.outputs.status == 'partial_success'
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            const status = '${{ steps.cherry_pick.outputs.status }}';
            const cherryPicked = '${{ steps.cherry_pick.outputs.cherry_picked }}';
            const conflicts = '${{ steps.cherry_pick.outputs.conflicts }}';
            const skipped = '${{ steps.cherry_pick.outputs.skipped }}';
            const pushed = '${{ steps.push.outputs.pushed }}';

            let reportBody = '';
            try {
              reportBody = fs.readFileSync('/tmp/sync_report.md', 'utf8');
            } catch (error) {
              reportBody = '‚ö†Ô∏è Report file not found';
            }

            reportBody += '\n## üì§ Push Status\n\n';
            if (pushed === 'true') {
              reportBody += '‚úÖ Changes have been pushed to main branch\n';
            } else {
              reportBody += '‚äò No changes to push\n';
            }

            let title, labels;
            if (status === 'success') {
              title = `‚úÖ Upstream Sync Successful - ${cherryPicked} commits applied`;
              labels = ['upstream-sync', 'success'];
            } else if (status === 'partial_success') {
              title = `‚ö†Ô∏è Upstream Sync Partial - ${cherryPicked} applied, ${conflicts} conflicts`;
              labels = ['upstream-sync', 'conflicts', 'attention-needed'];
            } else {
              title = `‚ÑπÔ∏è Upstream Sync - No new changes`;
              labels = ['upstream-sync', 'no-changes'];
            }

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: reportBody,
              labels: labels
            });
