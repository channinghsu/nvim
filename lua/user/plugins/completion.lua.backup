local completion = {}
local prompts = {
    -- ========== 代码理解 ==========
    explain = {
        name = "💡 解释代码",
        prompt = "请详细解释以下代码的作用、逻辑和工作原理。如果涉及复杂算法，请分步骤说明。",
    },
    analyze = {
        name = "🔍 深度分析",
        prompt = "请深入分析以下代码：\n1. 代码结构和设计模式\n2. 潜在的性能问题\n3. 安全性考虑\n4. 可维护性评估",
    },

    -- ========== 代码改进 ==========
    optimize = {
        name = "⚡ 优化代码",
        prompt = "请优化以下代码，重点关注：\n1. 性能提升（时间/空间复杂度）\n2. 代码简洁性\n3. 可读性改进\n请给出优化后的代码并说明改进点。",
    },
    refactor = {
        name = "🔧 重构代码",
        prompt = "请重构以下代码，改进其结构、命名和组织方式，使其更符合最佳实践和设计原则。",
    },
    simplify = {
        name = "✨ 简化代码",
        prompt = "请简化以下代码，去除冗余逻辑，使代码更加简洁明了，但保持功能完整。",
    },

    -- ========== 代码质量 ==========
    fix = {
        name = "🐛 修复问题",
        prompt = "请分析并修复以下代码中的潜在问题、错误和 bug，并解释修复原因。",
    },
    review = {
        name = "👀 代码审查",
        prompt = "请作为资深工程师审查以下代码，指出：\n1. 代码质量问题\n2. 潜在 bug\n3. 改进建议\n4. 最佳实践建议",
    },
    test = {
        name = "🧪 编写测试",
        prompt = "请为以下代码编写完整的单元测试，包括：\n1. 正常情况测试\n2. 边界情况测试\n3. 异常情况测试",
    },

    -- ========== 文档生成 ==========
    comment = {
        name = "📝 添加注释",
        prompt = "请为以下代码添加详细的中文注释，包括：\n1. 函数/类的用途说明\n2. 参数说明\n3. 返回值说明\n4. 关键逻辑的行内注释",
    },
    doc = {
        name = "📚 生成文档",
        prompt = "请根据以下代码生成完整的 API 文档，包括函数签名、参数说明、返回值、使用示例和注意事项。使用简体中文。",
    },
    readme = {
        name = "📖 生成 README",
        prompt = "请为以下代码/项目生成详细的 README 文档，包括：\n1. 项目简介\n2. 功能特性\n3. 安装方法\n4. 使用示例\n5. API 文档\n6. 贡献指南",
    },

    -- ========== Git 相关 ==========
    commit = {
        name = "📦 撰写提交信息",
        prompt = "请基于以下改动，生成符合 Conventional Commits 规范的英文提交信息，格式：<type>(<scope>): <subject>",
    },
    changelog = {
        name = "📋 生成变更日志",
        prompt = "请根据以下代码改动，生成清晰的变更日志（Changelog），分类为新增、修改、修复、删除等。",
    },

    -- ========== 代码转换 ==========
    translate = {
        name = "🌐 语言转换",
        prompt = "请将以下代码转换为另一种编程语言，保持功能完全一致，并添加必要的说明。目标语言：",
    },
    modernize = {
        name = "🚀 现代化改造",
        prompt = "请使用现代的语言特性和最佳实践重写以下代码，利用新的 API 和语法糖。",
    },
    typescript = {
        name = "🔷 添加 TypeScript 类型",
        prompt = "请为以下 JavaScript 代码添加完整的 TypeScript 类型注解，包括函数签名、接口定义等。",
    },

    -- ========== 学习辅助 ==========
    learn = {
        name = "🎓 教学讲解",
        prompt = "请用教学的方式详细讲解以下代码，假设读者是初学者，用简单易懂的语言说明每个部分的作用。",
    },
    example = {
        name = "💼 使用示例",
        prompt = "请为以下代码/函数提供 3-5 个实际使用示例，覆盖常见场景和特殊情况。",
    },

    -- ========== 安全性 ==========
    security = {
        name = "🔒 安全审查",
        prompt = "请从安全角度审查以下代码，识别潜在的安全漏洞（如注入攻击、XSS、CSRF 等），并提供修复建议。",
    },

    -- ========== 性能分析 ==========
    performance = {
        name = "📊 性能分析",
        prompt = "请分析以下代码的性能特征：\n1. 时间复杂度\n2. 空间复杂度\n3. 性能瓶颈\n4. 优化建议",
    },
}

completion["CopilotC-Nvim/CopilotChat.nvim"] = {
	branch = "main",
	build = "make tiktoken",
	dependencies = {
		{ "nvim-lua/plenary.nvim", branch = "master" },
		{ "nvim-telescope/telescope.nvim" },
		{ "zbirenbaum/copilot.lua" },
	},

	opts = {
		headers = {
			user = "## Channing ",
			assistant = "## Copilot ",
			error = "## Error ",
		},

		separator = "━━",
		auto_fold = true,
		auto_insert_mode = true,
		auto_follow_cursor = false,
		show_help = false,
		prompts = prompts,

		mappings = {
			complete = {
				detail = "Use @<Tab> or /<Tab> for options.",
				insert = "<Tab>",
			},
			close = {
				normal = "q",
				insert = "<C-c>",
			},
			reset = {
				normal = "<C-l>",
				insert = "<C-l>",
			},
			submit_prompt = {
				normal = "<CR>",
				insert = "<C-s>",
			},
			accept_diff = {
				normal = "<C-y>",
				insert = "<C-y>",
			},
			yank_diff = {
				normal = "gy",
			},
			show_diff = {
				normal = "gd",
			},
			show_info = {
				normal = "gc",
			},
			show_context = {
				normal = "gh",
			},
		},
	},

	config = function(_, opts)
		local chat = require("CopilotChat")
		local select = require("CopilotChat.select")

		opts.selection = select.unnamed

		opts.prompts.Commit = {
			prompt = "生成一条符合 Conventional Commits 规范的提交信息（中文），基于当前改动内容。",
			selection = select.gitdiff,
		}
		opts.prompts.CommitStaged = {
			prompt = "生成一条符合 Conventional Commits 规范的提交信息（中文），基于暂存区改动内容。",
			selection = function(source)
				return select.gitdiff(source, true)
			end,
		}

		chat.setup(opts)

		vim.api.nvim_create_user_command("CopilotChatVisual", function(args)
			chat.ask(args.args, { selection = select.visual })
		end, { nargs = "*", range = true })

		vim.api.nvim_create_user_command("CopilotChatInline", function(args)
			chat.ask(args.args, {
				selection = select.visual,
				window = {
					layout = "float",
					relative = "cursor",
					width = 1,
					height = 0.4,
					row = 1,
				},
			})
		end, { nargs = "*", range = true })

		vim.api.nvim_create_user_command("CopilotChatToggle", function()
			chat.toggle()
		end, {})

		vim.api.nvim_create_user_command("CopilotChatReset", function()
			chat.reset()
		end, {})

		vim.api.nvim_set_hl(0, "CopilotChatHeader", { fg = "#7C3AED", bold = true })
		vim.api.nvim_set_hl(0, "CopilotChatSeparator", { fg = "#374151" })
	end,
}

return completion
